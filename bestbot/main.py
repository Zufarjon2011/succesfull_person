from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import asyncio
from time import sleep
from config import locations1
from config import locations2
from config import locations3
from config import locations4
bot = Bot(token='5989035874:AAGGgOE8yoGlbHpujWYdjPMsA7EkYlipEu0')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
@dp.message_handler(commands=['about'])
async def about(message: types.Message):
    await message.answer("Данный бот создан на 2023 году 12 июль\nесли заметите ошибки на боте то пишите на @zufar_BRO")
@dp.message_handler(commands=['report'])
async def report(message: types.Message):
    await message.answer("Вы выбрали пункт 'Репорт' вам сюда @zufar_BRO")

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('Мечети по Ташкенту'))
    keyboard.add(types.KeyboardButton('Рестораны по Ташкенту'))
    await message.answer("Здравствуйте!\nэто бот которе вы можете найти Мечети по Ташкенту и Рестораны", reply_markup=keyboard)
    file = open("users.txt", mode='a', encoding='UTF-8')
    file.write(f'nick:{message.from_user.first_name}\nusername:{message.from_user.username}\n_________________________________________\n')
    file.close()

@dp.message_handler(commands=['rate'])
async def rate(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('1 из 10'))
    keyboard.add(types.KeyboardButton('2 из 10'))
    keyboard.add(types.KeyboardButton('3 из 10'))
    keyboard.add(types.KeyboardButton('4 из 10'))
    keyboard.add(types.KeyboardButton('5 из 10'))
    keyboard.add(types.KeyboardButton('6 из 10'))
    keyboard.add(types.KeyboardButton('7 из 10'))
    keyboard.add(types.KeyboardButton('8 из 10'))
    keyboard.add(types.KeyboardButton('9 из 10'))
    keyboard.add(types.KeyboardButton('10 из 10'))
    await message.answer("Оцените бота!", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == 'Мечети по Ташкенту')
async def button1(message: types.Message):
    await message.answer("Бот нашел информации!, вам сюда\n/startquick")

@dp.message_handler(lambda message: message.text == 'Рестораны по Ташкенту')
async def button2(message: types.Message):
    await message.answer("Бот нашел информации!, вам сюда\n/startquick")

@dp.message_handler(commands=['startquick'])
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('Поиск мечети'))
    keyboard.add(types.KeyboardButton('поиск ресторанов'))
    await message.answer("пожалуйсто подождите, бот ищет информатции...", reply_markup=keyboard)
    await message.answer("бот загрузил информации, можете нажымать на кнопок!")

@dp.message_handler(lambda message: message.text == 'Поиск мечети')
async def button1(message: types.Message):
    sleep(1)
    await message.answer(locations1.mechet1)
    sleep(1)
    await message.answer(locations1.loc1)
    sleep(1)
    await message.answer(locations1.mechet2)
    sleep(1)
    await message.answer(locations1.loc2)
    sleep(1)
    await message.answer(locations1.mechet3)
    sleep(1)
    await message.answer(locations1.loc3)
    sleep(1)
    await message.answer(locations1.mechet4)
    sleep(1)
    await message.answer(locations1.loc5)
    sleep(1)
    await message.answer(locations1.mechet5)
    sleep(1)
    await message.answer(locations1.loc5)
    sleep(1)
    await message.answer(locations1.mechet6)
    sleep(1)
    await message.answer(locations1.loc6)
    sleep(1)
    await message.answer(locations1.mechet7)
    sleep(1)
    await message.answer(locations1.loc7)
    sleep(1)
    await message.answer(locations1.mechet8)
    sleep(1)
    await message.answer(locations1.loc8)
    sleep(1)
    await message.answer(locations1.mechet9)
    sleep(1)
    await message.answer(locations1.loc9)
    sleep(1)
    await message.answer(locations1.mechet10)
    sleep(1)
    await message.answer(locations1.loc10)
    sleep(1)
    await message.answer(locations1.mechet11)
    sleep(1)
    await message.answer(locations1.loc11)

@dp.message_handler(lambda message: message.text == 'поиск ресторанов')
async def button1(message: types.Message):
    sleep(1)
    await message.answer(locations2.rest)
    sleep(1)
    await message.answer(locations2.locr1)
    sleep(1)
    await message.answer(locations2.rest2)
    sleep(1)
    await message.answer(locations2.locr2)
    sleep(1)
    await message.answer(locations2.rest3)
    sleep(1)
    await message.answer(locations2.locr3)
    sleep(1)
    await message.answer(locations2.rest4)
    sleep(1)
    await message.answer(locations2.locr4)
    sleep(1)
    await message.answer(locations2.rest5)
    sleep(1)
    await message.answer(locations2.locr5)
    sleep(1)
    await message.answer(locations2.rest6)
    sleep(1)
    await message.answer(locations2.locr6)
    sleep(1)
    await message.answer(locations2.rest7)
    sleep(1)
    await message.answer(locations2.locr7)
    sleep(1)
    await message.answer(locations2.rest8)
    sleep(1)
    await message.answer(locations2.locr8)
    sleep(1)
    await message.answer(locations2.rest9)
    sleep(1)
    await message.answer(locations2.locr9)
    sleep(1)
    await message.answer(locations2.rest10)
    sleep(1)
    await message.answer(locations2.locr10)
    sleep(1)
    await message.answer(locations2.rest11)
    sleep(1)
    await message.answer(locations2.locr11)
@dp.message_handler(commands=['again'])
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('найти еще Мечетей'))
    keyboard.add(types.KeyboardButton('найти еще ресторанов'))
    await message.answer("Выберите кнопок!", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == 'найти еще Мечетей')
async def button2(message: types.Message):
    sleep(1)
    await message.answer(locations3.mechet1a)
    sleep(1)
    await message.answer(locations3.loc1a)
    sleep(1)
    await message.answer(locations3.mechet2a)
    sleep(1)
    await message.answer(locations3.loc2a)
    sleep(1)
    await message.answer(locations3.mechet3a)
    sleep(1)
    await message.answer(locations3.loc3a)
    sleep(1)
    await message.answer(locations3.mechet4a)
    sleep(1)
    await message.answer(locations3.loc4a)
    sleep(1)
    await message.answer(locations3.mechet5a)
    sleep(1)
    await message.answer(locations3.loc5a)
    sleep(1)
    await message.answer(locations3.mechet6a)
    sleep(1)
    await message.answer(locations3.loc6a)
    sleep(1)
    await message.answer(locations3.mechet7a)
    sleep(1)
    await message.answer(locations3.loc7a)
    sleep(1)
    await message.answer(locations3.mechet8a)
    sleep(1)
    await message.answer(locations3.loc8a)
    sleep(1)
    await message.answer(locations3.mechet9a)
    sleep(1)
    await message.answer(locations3.loc9a)
    sleep(1)
    await message.answer(locations3.mechet10a)
    sleep(1)
    await message.answer(locations3.loc10a)
    sleep(1)
    await message.answer(locations3.mechet11a)
    sleep(1)
    await message.answer(locations3.loc11a)
    sleep(1)
    await message.answer(locations3.mechet12a)
    sleep(1)
    await message.answer(locations3.loc12a)
    sleep(1)
    await message.answer(locations3.mechet13a)
    sleep(1)
    await message.answer(locations3.loc13a)
    sleep(1)
    await message.answer(locations3.mechet15a)
    sleep(1)
    await message.answer(locations3.loc15a)
    sleep(1)
    await message.answer(locations3.mechet16a)
    sleep(1)
    await message.answer(locations3.loc16a)
    sleep(1)
    await message.answer(locations3.mechet17a)
    sleep(1)
    await message.answer(locations3.loc17a)
    sleep(1)
    await message.answer(locations3.mechet18a)
    sleep(1)
    await message.answer(locations3.loc18a)
    sleep(1)
    await message.answer(locations3.mechet19a)
    sleep(1)
    await message.answer(locations3.loc19a)
    sleep(1)
    await message.answer(locations3.mechet20a)
    sleep(1)
    await message.answer(locations3.loc20a)
@dp.message_handler(lambda message: message.text == 'найти еще ресторанов')
async def button2(message: types.Message):
    sleep(1)
    await message.answer(locations4.rest1a)
    sleep(1)
    await message.answer(locations4.locr1a)
    sleep(1)
    await message.answer(locations4.rest2a)
    sleep(1)
    await message.answer(locations4.locr2a)
    sleep(1)
    await message.answer(locations4.rest3a)
    sleep(1)
    await message.answer(locations4.locr3a)
    sleep(1)
    await message.answer(locations4.rest4a)
    sleep(1)
    await message.answer(locations4.locr4a)
    sleep(1)
    await message.answer(locations4.rest5a)
    sleep(1)
    await message.answer(locations4.locr5a)
    sleep(1)
    await message.answer(locations4.rest6a)
    sleep(1)
    await message.answer(locations4.locr6a)
    sleep(1)
    await message.answer(locations4.rest7a)
    sleep(1)
    await message.answer(locations4.rest7a)
    sleep(1)
    await message.answer(locations4.rest8a)
    sleep(1)
    await message.answer(locations4.locr8a)
    sleep(1)
    await message.answer(locations4.rest9a)
    sleep(1)
    await message.answer(locations4.locr9a)
    sleep(1)
    await message.answer(locations4.rest10a)
    sleep(1)
    await message.answer(locations4.locr10a)
    sleep(1)
    await message.answer(locations4.rest11a)
    sleep(1)
    await message.answer(locations4.locr11a)
@dp.message_handler(commands=['rate'])
async def rate(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton('1 из 10'))
    keyboard.add(types.KeyboardButton('2 из 10'))
    keyboard.add(types.KeyboardButton('3 из 10'))
    keyboard.add(types.KeyboardButton('4 из 10'))
    keyboard.add(types.KeyboardButton('5 из 10'))
    keyboard.add(types.KeyboardButton('6 из 10'))
    keyboard.add(types.KeyboardButton('7 из 10'))
    keyboard.add(types.KeyboardButton('8 из 10'))
    keyboard.add(types.KeyboardButton('9 из 10'))
    keyboard.add(types.KeyboardButton('10 из 10'))
@dp.message_handler(lambda message: message.text == '1 из 10')
async def button2(message: types.Message):
    await message.answer("Спосибо за оценку")
@dp.message_handler(lambda message: message.text == '2 из 10')
async def button2(message: types.Message):
    await message.answer("Спосибо за оценку")
@dp.message_handler(lambda message: message.text == '3 из 10')
async def button2(message: types.Message):
    await message.answer("Спосибо за оценку")
@dp.message_handler(lambda message: message.text == '4 из 10')
async def button2(message: types.Message):
    await message.answer("Спосибо за оценку")
@dp.message_handler(lambda message: message.text == '5 из 10')
async def button2(message: types.Message):
    await message.answer("Спосибо за оценку")
@dp.message_handler(lambda message: message.text == '6 из 10')
async def button2(message: types.Message):
    await message.answer("Спосибо за оценку")
@dp.message_handler(lambda message: message.text == '7 из 10')
async def button2(message: types.Message):
    await message.answer("Спосибо за оценку")
@dp.message_handler(lambda message: message.text == '8 из 10')
async def button2(message: types.Message):
    await message.answer("Спосибо за оценку")
@dp.message_handler(lambda message: message.text == '9 из 10')
async def button2(message: types.Message):
    await message.answer("Спосибо за оценку")
@dp.message_handler(lambda message: message.text == '10 из 10')
async def button2(message: types.Message):
    await message.answer("Спосибо за оценку!!!")
if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(dp.start_polling())
    loop.run_forever()